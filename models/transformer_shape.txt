[Transformer] Source shape before embedding: torch.Size([32, 512])
[PositionalEncoding] Input shape: torch.Size([32, 512, 768])
[PositionalEncoding] Positional encoding shape: torch.Size([1, 512, 768])
[EncoderLayer] Input shape: torch.Size([32, 512, 768])
[MultiHeadAttention] After linear transformation - Q shape: torch.Size([32, 8, 512, 96]), K shape: torch.Size([32, 8, 512, 96]), V shape: torch.Size([32, 8, 512, 96])
[Attention] Scores shape: torch.Size([32, 8, 512, 512])
[Attention] Mask shape: torch.Size([32, 1, 1, 512])
[Attention] Output shape: torch.Size([32, 8, 512, 96])
[MultiHeadAttention] Output shape: torch.Size([32, 512, 768])
[EncoderLayer] Shape after attention: torch.Size([32, 512, 768])
[EncoderLayer] Output shape: torch.Size([32, 512, 768])
[Transformer] Encoded shape: torch.Size([32, 512, 768])
[Transformer] Target shape before embedding: torch.Size([32, 512])
[PositionalEncoding] Input shape: torch.Size([32, 512, 768])
[PositionalEncoding] Positional encoding shape: torch.Size([1, 512, 768])
[DecoderLayer] Input shape: torch.Size([32, 512, 768])
[MultiHeadAttention] After linear transformation - Q shape: torch.Size([32, 8, 512, 96]), K shape: torch.Size([32, 8, 512, 96]), V shape: torch.Size([32, 8, 512, 96])
[Attention] Scores shape: torch.Size([32, 8, 512, 512])
[Attention] Mask shape: torch.Size([32, 1, 1, 512])
[Attention] Output shape: torch.Size([32, 8, 512, 96])
[MultiHeadAttention] Output shape: torch.Size([32, 512, 768])
[DecoderLayer] Shape after self-attention: torch.Size([32, 512, 768])
[MultiHeadAttention] After linear transformation - Q shape: torch.Size([32, 8, 512, 96]), K shape: torch.Size([32, 8, 512, 96]), V shape: torch.Size([32, 8, 512, 96])
[Attention] Scores shape: torch.Size([32, 8, 512, 512])
[Attention] Mask shape: torch.Size([32, 1, 1, 512])
[Attention] Output shape: torch.Size([32, 8, 512, 96])
[MultiHeadAttention] Output shape: torch.Size([32, 512, 768])
[DecoderLayer] Shape after encoder-decoder attention: torch.Size([32, 512, 768])
[DecoderLayer] Output shape: torch.Size([32, 512, 768])
[Transformer] Decoded shape: torch.Size([32, 512, 768])
[Transformer] Output shape after generator: torch.Size([32, 512, 10000])
Output shape: torch.Size([32, 512, 10000])