D:\Anaconda\envs\nlp\lib\site-packages\pytorch_lightning\callbacks\model_checkpoint.py:654: Checkpoint directory D:\Internship\Apple\Week3\Translation_v1.0\checkpoints exists and is not empty.
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]

  | Name    | Type             | Params | Mode
-----------------------------------------------------
0 | model   | Transformer      | 92.5 M | train
1 | loss_fn | CrossEntropyLoss | 0      | train
-----------------------------------------------------
92.5 M    Trainable params
0         Non-trainable params
92.5 M    Total params
369.925   Total estimated model params size (MB)
308       Modules in train mode
0         Modules in eval mode
D:\Anaconda\envs\nlp\lib\site-packages\pytorch_lightning\trainer\connectors\data_connector.py:419: Consider setting `persistent_workers=True` in 'train_dataloader' to speed up the dataloader worker initialization.
D:\Anaconda\envs\nlp\lib\site-packages\pytorch_lightning\loops\fit_loop.py:298: The number of training batches (16) is smaller than the logging interval Trainer(log_every_n_steps=50). Set a lower value for log_every_n_steps if you want to see logs for the training epoch.
Epoch 0:   0%|                                                                                                                                      | 0/16 [00:00<?, ?it/s]
Traceback (most recent call last):
  File "train.py", line 126, in <module>
    main()
  File "train.py", line 121, in main
    trainer.fit(model, train_loader, ckpt_path=args.ckpt_path)
  File "D:\Anaconda\envs\nlp\lib\site-packages\pytorch_lightning\trainer\trainer.py", line 538, in fit
    call._call_and_handle_interrupt(
  File "D:\Anaconda\envs\nlp\lib\site-packages\pytorch_lightning\trainer\call.py", line 47, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
  File "D:\Anaconda\envs\nlp\lib\site-packages\pytorch_lightning\trainer\trainer.py", line 574, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
  File "D:\Anaconda\envs\nlp\lib\site-packages\pytorch_lightning\trainer\trainer.py", line 981, in _run
    results = self._run_stage()
  File "D:\Anaconda\envs\nlp\lib\site-packages\pytorch_lightning\trainer\trainer.py", line 1025, in _run_stage
    self.fit_loop.run()
  File "D:\Anaconda\envs\nlp\lib\site-packages\pytorch_lightning\loops\fit_loop.py", line 205, in run
    self.advance()
  File "D:\Anaconda\envs\nlp\lib\site-packages\pytorch_lightning\loops\fit_loop.py", line 363, in advance
    self.epoch_loop.run(self._data_fetcher)
  File "D:\Anaconda\envs\nlp\lib\site-packages\pytorch_lightning\loops\training_epoch_loop.py", line 140, in run
    self.advance(data_fetcher)
  File "D:\Anaconda\envs\nlp\lib\site-packages\pytorch_lightning\loops\training_epoch_loop.py", line 250, in advance
    batch_output = self.automatic_optimization.run(trainer.optimizers[0], batch_idx, kwargs)
  File "D:\Anaconda\envs\nlp\lib\site-packages\pytorch_lightning\loops\optimization\automatic.py", line 190, in run
    self._optimizer_step(batch_idx, closure)
  File "D:\Anaconda\envs\nlp\lib\site-packages\pytorch_lightning\loops\optimization\automatic.py", line 268, in _optimizer_step
    call._call_lightning_module_hook(
  File "D:\Anaconda\envs\nlp\lib\site-packages\pytorch_lightning\trainer\call.py", line 167, in _call_lightning_module_hook
    output = fn(*args, **kwargs)
  File "D:\Anaconda\envs\nlp\lib\site-packages\pytorch_lightning\core\module.py", line 1306, in optimizer_step
    optimizer.step(closure=optimizer_closure)
  File "D:\Anaconda\envs\nlp\lib\site-packages\pytorch_lightning\core\optimizer.py", line 153, in step
    step_output = self._strategy.optimizer_step(self._optimizer, closure, **kwargs)
  File "D:\Anaconda\envs\nlp\lib\site-packages\pytorch_lightning\strategies\strategy.py", line 238, in optimizer_step
    return self.precision_plugin.optimizer_step(optimizer, model=model, closure=closure, **kwargs)
  File "D:\Anaconda\envs\nlp\lib\site-packages\pytorch_lightning\plugins\precision\precision.py", line 122, in optimizer_step
    return optimizer.step(closure=closure, **kwargs)
  File "D:\Anaconda\envs\nlp\lib\site-packages\torch\optim\lr_scheduler.py", line 130, in wrapper
    return func.__get__(opt, opt.__class__)(*args, **kwargs)
  File "D:\Anaconda\envs\nlp\lib\site-packages\torch\optim\optimizer.py", line 484, in wrapper
    out = func(*args, **kwargs)
  File "D:\Anaconda\envs\nlp\lib\site-packages\torch\optim\optimizer.py", line 89, in _use_grad
    ret = func(self, *args, **kwargs)
  File "D:\Anaconda\envs\nlp\lib\site-packages\torch\optim\adamw.py", line 204, in step
    loss = closure()
  File "D:\Anaconda\envs\nlp\lib\site-packages\pytorch_lightning\plugins\precision\precision.py", line 108, in _wrap_closure
    closure_result = closure()
  File "D:\Anaconda\envs\nlp\lib\site-packages\pytorch_lightning\loops\optimization\automatic.py", line 144, in __call__
    self._result = self.closure(*args, **kwargs)
  File "D:\Anaconda\envs\nlp\lib\site-packages\torch\utils\_contextlib.py", line 116, in decorate_context
    return func(*args, **kwargs)
  File "D:\Anaconda\envs\nlp\lib\site-packages\pytorch_lightning\loops\optimization\automatic.py", line 138, in closure
    self._backward_fn(step_output.closure_loss)
  File "D:\Anaconda\envs\nlp\lib\site-packages\pytorch_lightning\loops\optimization\automatic.py", line 239, in backward_fn
    call._call_strategy_hook(self.trainer, "backward", loss, optimizer)
  File "D:\Anaconda\envs\nlp\lib\site-packages\pytorch_lightning\trainer\call.py", line 319, in _call_strategy_hook
    output = fn(*args, **kwargs)
  File "D:\Anaconda\envs\nlp\lib\site-packages\pytorch_lightning\strategies\strategy.py", line 212, in backward
    self.precision_plugin.backward(closure_loss, self.lightning_module, optimizer, *args, **kwargs)
  File "D:\Anaconda\envs\nlp\lib\site-packages\pytorch_lightning\plugins\precision\precision.py", line 72, in backward
    model.backward(tensor, *args, **kwargs)
  File "D:\Anaconda\envs\nlp\lib\site-packages\pytorch_lightning\core\module.py", line 1101, in backward
    loss.backward(*args, **kwargs)
  File "D:\Anaconda\envs\nlp\lib\site-packages\torch\_tensor.py", line 521, in backward
    torch.autograd.backward(
  File "D:\Anaconda\envs\nlp\lib\site-packages\torch\autograd\__init__.py", line 289, in backward
    _engine_run_backward(
  File "D:\Anaconda\envs\nlp\lib\site-packages\torch\autograd\graph.py", line 769, in _engine_run_backward
    return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 3.18 GiB. GPU 0 has a total capacity of 8.00 GiB of which 0 bytes is free. Of the allocated memory 13.00 GiB is allocated by PyTorch, and 241.07 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
